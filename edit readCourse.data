#!/usr/bin/env python
#-*-coding:utf-8-*-


import os, json
import os,inspect
from pymongo import MongoClient
import pandas as pd
import logging

class Course:
	
    def __init__(self, *args, **kwargs):
    	for attr in args:
		setattr(slef,attr,[])
  	kwargs = {'UID': '', 'crn': '', 'course_num':'', 'section_num':'', 'campus':'',\
               	  'num_credit':'', 'course_title':'', 'days':'', 'startTime':u.split('-')[1], 'endTime':u.split('-')[2],\
               	  'cap':'', 'wl_cap':'', 'instructor_name':'', 'startDate':j.split('-')[1], 'endDate':j.split('-')[2], 'location':'', \
               	  'attribute':''}
  	for k,v in kwargs:
        	setattr(slef,k,v)
			

class Instructor:
	def __init__(self, firstName, middleName, lastName):
		self.firstName = firstName
		self.middleName = middleName
		self.lastName = lastName
		self.website = ''
		self.email = ''
		self.department = []
		self.relatedCourse = []

class Department:
	def __init__(self, deptName):
		self.deptName = deptName
		self.courses = []

class Lab:
	def __init__(self, UID, days, startTime, endTime, \
				startDate, endDate, instructor, location):
		self.UID = UID
		self.days = days
		self.startTime = startTime
		self.endTime = endTime
		self.startDate = startDate
		self.endDate = endDate
		self.instructor = instructor
		self.location = location
		
class Logger:
	def __init__(self, __name__):
		self.logger = logging.getLogger(__name__)
		self.logger.setLevel(logging.DEBUG)
		fmt = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s', '%Y-%m-%d %H:%M:%S')
		sh = logging.StreamHandler()
		sh.setFormatter(fmt)
		sh.setLevel(DEBUG)
		fh = logging.FileHandler(path)
		fh.setFormatter(fmt)
		fh.setLevel(INFO)
		self.logger.addHandler(sh)
		self.logger.addHandler(fh)
###not sure
		def debug(self,message):
		self.logger.debug(message)
		def info(self,message):
		self.logger.info(message)
		def war(self,message):
		self.logger.warn(message)
		def error(self,message):
		self.logger.error(message)
		def cri(self,message):
		self.logger.critical(message)
		
		
    
def main():

	logobj = Logger(__name__)
	
	###Don't forget to put all the .json file in the current dir
	current_path = inspect.getfile(inspect.currentframe())
	current_path = current_path.replace('\\', '/')
	dir_name = os.path.dirname(current_path)
	file_abs_path = os.path.abspath(dir_name) + "\\"
  	file_name = input("Please enter YYYY_QQQQ_School (Example 2018_Winter_De_Anza):\n")
	file_abs_path += file_name
	file_abs_path += "_courseData.json"
	if file_abs_path:
		with open(file_abs_path, 'r') as f:
			course_raw_data = json.load(f)

	course_list = []
	dept_list = []
	total_course = 0
  	file_name = file_name.replace('_',' ')
  
	for department in course_raw_data[file_name]["CourseData"]:
		dep_course_num = 0
		temp_dept = Department(department)
		for c,v in course_raw_data[file_name]["CourseData"][department]:
			dep_course_num += 1
			temp_course = Course(*c, **v)
			course_list.append(temp_course)
			course_ineach_dept = "{}{}{}".format(temp_dept.deptName, temp_course.course_num, temp_course.course_title) 
			if course_ineach_dept not in temp_dept.courses:
				temp_dept.courses.append(course_ineach_dept)
			total_course += 1
		logger.info('department', department, "has", dep_course_num, "sections.")
		dept_list.append(temp_dept)

	print('total course:', total_course)
	print('loaded course:', len(course_list))

	username = input("Enter your username:")
	password = input("Password:")
	client = MongoClient("mongodb+srv://" + username +":" + password + "@fhdatimedb-jjsjm.mongodb.net/test?retryWrites=true&w=majority")
	db = client.get_database('Instructor')
	tc = db.new_test_courses
	td = db.new_test_depts
	for course in course_list:
		temp_course = {
			'UID' : course.UID,
			'crn': course.crn,
			'course_num' : course.course_num,
			'section_num' : course.section_num,
			'campus' : course.campus,
			'num_credit' : course.num_credit,
			'course_title' : course.course_title,
			'days' : course.days,
			'start_time' : course.startTime,
			'end_time' : course.endTime,
			'cap' : course.cap,
			'wl_cap' : course.wl_cap,
			'instructor_name' : course.instructor_name,
			'start_date' : course.startDate,
			'end_date' : course.endDate,
			'location' : course.location,
			'attribute' : course.attribute,
		}
		tc.insert_one(temp_course)

	for dept in dept_list:
		temp_dept = {
			'department_name' : dept.deptName,
			'course_list' : dept.courses
		}
		td.insert_one(temp_dept)
		
		

if __name__ == "__main__":
	main()
